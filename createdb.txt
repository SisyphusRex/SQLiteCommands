To create a database:
  1. sqlite3 <database>.db
  2. Add table
    1. CREATE TABLE "<tablename>" (
           "<column1>" <AFFINITY>,
           "<column2>" <AFFINITY> <COLUMNCONSTRAINT>,
           PRIMARY KEY("<column1>"),
           FOREIGN KEY("<column2>") REFERENCES "<table2>"("pk"),
      );
    * by convention, four spaces before each column name

Delete database:
  From command line:
    rm <database_name>.db

SQLite3 Storage Classes:
    NULL empty value
    INTEGER whole number
    REAL decimals
    TEXT characters
    BLOB binary large object, data exactly as I give it
    * the storage classes hold data types

Type Affinities:
    * columns will try to convert inserted value to affinity of column
    TEXT
    NUMERIC:
      * integers or real numbers
    INTEGER
    REAL
    BLOB

Delete a Table:
  DROP TABLE "<tablename>";

Add schema.sql to DB:
  1. create schema.sql with tables inside
  2. sqlite3 <database>.db
  3. .read schema.sql

Table Constraint:
  * some values must be a certain type or condition
  * Types 
    1. PRIMARY KEY
      * automatically applies column constraints like NOT NULL (as does foreign key)
    2. FOREIGN KEY

Joint Primary Key:
  PRIMARY KEY("id1", "id2")

"row_id"
  * SQLite creates a hidden primary key called "row_id", 
  * can be queried

Column Constraint:
  CHECK: check to be sure
    * "amount" NUMERIC NOT NULL CHECK("amount" <> 0),
    * "type" TEXT NOT NULL CHECK("type" IN ('enter', 'exit', 'deposit')),
  DEFAULT: use default value
    * "datetime" NUMERIC NOT NULL DEFAULT CURRENT_TIMESTAMP,
  NOT NULL: value is required
  UNIQUE: every row is unique value
  
ALTER TABLE "<tablename>" RENAME TO "<newname>";
ALTER TABLE "..." ADD COLUMN "...";
RENAME COLUMN
DROP COLUMN

INSERT INTO "<tablename>" ("column1", "column2"...) VALUES (value1, value2...);
or you can add to all columns
INSERT INTO "tablename" VALUES (value1, value2, ...);

To make schema use new values on each .read:
  At top of schema.sql:
    DROP TABLE IF EXISTS "<tablename>";
