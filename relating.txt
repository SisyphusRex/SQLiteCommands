

Entity Relationship Diagram
  Zero ---O-
  One  ---|-
  Many ---E

Primary Key
  unique identifier such as ISBN for books
  but ISBN takes up space
  create ID of unique numbers
Foreign Key
  take primary key of one table and use inside of another table

Join Table/Association Table
  Author Table
    PK: author_id
  Books Table
    PK: book_id
  Authored Table
    author_id TO book_id

SubQuery:
  SELECT "title" FROM "books" WHERE "publisher_id = (
    SELECT "id" FROM "publishers" WHERE "publisher" = 'Fitzcarraldo Editions');

IN
  see if value is in set of values
  SELECT "title" FROM "books" WHERE "id" IN (id1, id2, ...)

(INNER) JOIN
  join separate tables with common keys
  SELECT * FROM "sea_lions" JOIN "migrations" ON "migrations"."id" = "sea_lions"."id";
  primary table joined with secondary table matching which column of each as equal

  SELECT * FROM "sea_lions" JOIN "migrations" ON "migrations"."id" = "sea_lions"."id" AND "migrations"."year" = "sea_lions"."year"

OUTER JOIN:
  lets you keep some data if not all keys in both tables
  LEFT JOIN
    keeps rows from first table in JOIN command
  RIGHT JOIN
    second table
  FULL JOIN
    all rows
NATURAL JOIN:
  looks for columns with same name and joins by them
  SELECT * FROM "sea_lions" NATURAL JOIN "migrations";

INTERSECT, UNION, EXCEPT
  SELECT "name" FROM "translators" UNION SELECT "name" FROM "authors";
  compare two different queries

GROUP BY
  creates groups based on parameter/id
  SELECT "book_id", AVG("rating") FROM "ratings" GROUP BY "book_id";
  * Count occurrence of title in list, show title and count:
  SELECT "title", COUNT("title") FROM "votes" GROUP BY "title";
HAVING
  like WHERE but for groups

SUM
  return sum of all fields in a column of a table
  SELECT SUM(column_name) FROM "table_name"

JOIN Three Tables
  SELECT "players"."first_name", "players"."last_name", "salaries"."salary", "salaries"."year"
  FROM "players"
  JOIN "salaries" ON "salaries"."player_id" = "players"."id"
  JOIN "performances" ON "performances"."player_id" = "salaries"."player_id"
  WHERE "salaries"."year" = "performances"."year"  <--------IMPORTANT TO STOP DUPLICATION
  ORDER BY "players"."id";

WITH
  create temporary table or result set
  WITH "temp1" AS ( SELECT "table1"."id", "table2"."rank" FROM "table1" JOIN ...)
  now you can use "temp1" table in future queries
  * allows you to use ORDER BY and LIMIT more than once
