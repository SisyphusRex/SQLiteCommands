CRUD Operations
  Create
  Read
  Update
  Delete

Add New Row to a Table
  INSERT INTO "<table_name>" ("column0", ...)
  VALUES ('value0', ...)

If Schema has PRIMARY KEY("id")
  then "id" autoincrements if not included in INSERT INTO

Add Multiple Rows:
  INSERT INTO "<table_name>" ("column0", ...)
  VALUES 
  ('value00', 'value01',...),
  ('value10', 'value11',...),
  ...;

Import CSV After Table Created
  .import --csv --skip 1 <file>.csv <table_name>
  skip 1 to skip first row headers

Import CSV with less columns than table (no id column) and Create new primary keys
  1. Import to temporary table
    .import --csv <file_name>.csv temp
  2. Insert into target table
    INSERT INTO "<target_table>" ("column0", ...)
    SELECT "column0", ... 
    FROM "<temp_table_name>";

Deleting Entries:
  DELETE FROM "<table>" WHERE "<condition>";

Deleting Constraints:
  Foreign Key Constraint ***MUST BE TURNED ON IN DB CONNECTION: sqlite> PRAGMA foreign_keys = ON;
    Primary key of line you want to delete in one table is a foreign key in another table
      1. Delete the line containing the foreign key reference in the other table
        DELETE FROM "created" WHERE "artist_id" = (
          SELECT "id" FROM "artists" WHERE "name" = 'Unidentified artist'
        );
      2. Then delete the line in your first table
        DELETE FROM "artists" WHERE "name" = 'Unidentified artist';
    Change Table Schema to account for deletion
      FOREIGN KEY("artist_id") REFERENCES "artists"("id")
      ON DELETE RESTRICT  <--- does not allow deletion, restriction enforced immediately
      ON DELETE NO ACTION   <--- restriction is enforced at end of transaction (so delete can happen if other statements resolve the foreign key restraint
      ON DELETE CASCADE: deletes child rows when parent row deleted
      ON DELETE SET NULL: sets foreign key value in child row to null when parent row deleted
  

Updating:
  UPDATE "created" SET "artist_id" = (
    SELECT "id" FROM "artists"
    WHERE "name" = 'Li Yin'
  )
  WHERE "collection_id" = (
    SELECT "id" FROM "collections"
    WHERE "title" = 'Farmers working at dawn'
  );

UPDATE "table"
SET "column0" = value0, column1 = value1, ...
WHERE <condition>;

trim()
  Remove leading and trailing whitespace: trim("<column>")
    UPDATE "votes" SET "title" = trim("title");

upper()
  Convert strings to all uppercase: upper("<column>")
    UPDATE "votes" SET "title" = upper("title");

Triggers
  SQL command runs when another transaction is completed.
    CREATE TRIGGER "<name>"
    BEFORE DELETE ON "<table>"  <--- can be before or after, Delete or update
    FOR EACH ROW   <---- runs for each affected row
    BEGIN
      INSERT INTO "<table>" ("<column0>", "<column1>")
      VALUES (OLD."<column0>", 'value1');
    END;
  OLD is keyword access to row just deleted
  NEW is keyword access to row just added

  CREATE TRIGGER will add it to schema
  **OR
  Put all triggers in a separate file, triggers.sql.  
    After .read schema.sql, .read triggers.sql
    Loads triggers into schema

Soft Delete
  Add "deleted" column inside table with default 0
  Either use ALTER TABLE statement or include "deleted" INTEGER DEFAULT 0 in schema
    ALTER TABLE "collections" ADD COLUMN "deleted" INTEGER DEFAULT 0;
  Then, just update "deleted" column
    UPDATE "collections" SET "deleted" = 1
    WHERE "title" = 'whatever the title is';
  SELECT * FROM "collections" WHERE "deleted" != 1;
