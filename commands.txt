To interact with database:
    navigate to directory containing database
    type: sqlite3 <database>.db
    command prompt changes but looks blank in git bash
    type sql queries as normal
    to exit:
        ctrl + c and then Enter
        OR
        .quit

SQL Comments
    -- This is a comment

Show Table Headers:
    .headers on
Display in Columns
    .mode columns
Format Query Result:
    .mode box

Find out about database, show tables:
  sqlite3 <database>.db
  .tables

Show table column titles:
    PRAGMA table_info("<tablename>");

Enforce Foreign Key Constraints:
    PRAGMA foreign_keys = ON;

Show Schema
    sqlite3 <database>.db
    .schema

Keywords:
    SELECT, FROM, ON ...
    always capitalized

Tables:
    "author", "id"
    in double quotes

Strings:
    'Yeetus'
    single quotes

Numbers:
    6
    no quotes

SubQueries:
    ()
    insided parentheses

Write Queries in Document
    create <docname>.sql
    put sql query in doc
Run query from doc:
    run sqlite3 <database>.db
    .read <docname>.sql

Run Query from doc and Save to file:
    int terminal:
        cat <docname>.sql | sqlite3 <database>.db > <outputfilename>.txt

Get rows:
    SELECT * FROM "<tablename>;
    SELECT "<column>", "<column>" FROM "<tablename>";

Get first rows:
    SELECT "title" FROM "longlist" LIMIT 5;
        returns first 5 rows

Get rows with criteria:
    SELECT "title", "author" FROM "longlist" WHERE "year" = 2023;
    SELECT "title", "format" FROM "longlist" WHERE "format" != 'hardcover';

LIMIT:
    SELECT "title" FROM "longlist" LIMIT 10;
    retrieves first 10 entries

NOT:
    SELECT "title", "format" FROM "longlist" WHERE "format" != 'hardcover';
        is equal to:
            SELECT "title", "format" FROM "longlist" WHERE NOT "format" = 'hardcover';

Operators:
    != is <>
    %...% looks for match in middle of string
    ...% looks for match in beginning of string
    %... looks for match at end
    _ match single missing character
    > range greater than
    < range less than
    >= greater than or equal
    <= less than or equal

Arithmetic Operators
    +, -, /, *, %

To split query over multiple lines in terminal:
    At end of line, hit Enter
    at end of query, type ';' and Enter

OR
    SELECT "title" FROM "longlist" WHERE ("year" = 2023 OR "year" = 2022);
AND
    SELECT "title", "author" FROM "longlist" WHERE "year" = 2023 AND "format" = 'hardcover';

NULL:
    doesn't exist , IS NULL, IS NOT NULL
    SELECT "title", "translator" FROM "longlist" WHERE "translator" IS NULL;

LIKE:
    pattern matching
    SELECT "title" FROM "longlist" WHERE "title" LIKE '%love%';
    SELECT "title" FROM "longlist" WHERE "title" LIKE 'p_re';

Conventions:
    SQL Commands are Capitalized
        SELECT FROM NOT
    Attributes in double quotes
        "title", "longlist"
    Strings in single quotes
        'The%'

Range BETWEEN ... AND
    SELECT "title", "year" FROM "longlist" WHERE "year" >= 2019 AND "year" <= 2022;
    or
    SELECT "title", "year" FROM "longlist" WHERE "year" BETWEEN 2019 AND 2022;

ORDER BY
    default ascending order
    SELECT "title", "rating" FROM "longlist" ORDER BY "rating" LIMIT 10;
    ORDER BY ... ASC
    ORDER BY ... DESC
Sub Ordering:
    when a tie, order by different attribute
    SELECT "title", "rating", "votes" FROM "longlist" ORDER BY "rating" DESC, "votes" DESC LIMIT 10;
Alphabetical Ordering:
    sql converts letters to ASCII values, so A is smaller than Z, thus alphabetical is ASC

AVG
    SELECT AVG("rating") FROM "longlist";
ROUND(..., digits to round)
    ROUND(AVG("rating"), 2)

AS
    rename
    SELECT ROUND(AVG("rating"), 2) AS "average rating" FROM "longlist";

MIN
    minimum
    SELECT MIN("rating") FROM "longlist";
MAX
    maximum
SUM
    summation
    SELECT SUM("votes") FROM "longlist";
COUNT
    count amount of something
    SELECT COUNT("translator") FROM "longlist";
*
    Everything, all rows
    SELECT COUNT(*) FROM "longlist";

DISTINCT
    unique item
    SELECT COUNT(DISTINCT "translator") FROM "longlist";
    SELECT DISTINCT "publisher" FROM "longlist";

Association/Join Table
    Table made of Foreign Keys and no primary key.  Associates elements of one table to elements of another
